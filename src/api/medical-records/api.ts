/* tslint:disable */
/* eslint-disable */
/**
 * Medical Records API
 * Medical Records management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: <your_email>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MedicalRecord
 */
export interface MedicalRecord {
    /**
     * Unique id of the medical record
     * @type {string}
     * @memberof MedicalRecord
     */
    'id': string;
    /**
     * Summary of the medical record
     * @type {string}
     * @memberof MedicalRecord
     */
    'details': string;
}
/**
 * 
 * @export
 * @interface MedicalRecordDetail
 */
export interface MedicalRecordDetail {
    /**
     * Detailed information of the medical record
     * @type {string}
     * @memberof MedicalRecordDetail
     */
    'details': string;
}

/**
 * MedicalRecordsApi - axios parameter creator
 * @export
 */
export const MedicalRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the list of all medical records
         * @summary Provides all medical records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMedicalRecords: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/medical-records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using patientId you get the list of medical records
         * @summary Provides the medical records for a patient
         * @param {string} patientId pass the id of the particular patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedicalRecords: async (patientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getMedicalRecords', 'patientId', patientId)
            const localVarPath = `/medical-records/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MedicalRecordsApi - functional programming interface
 * @export
 */
export const MedicalRecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MedicalRecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the list of all medical records
         * @summary Provides all medical records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMedicalRecords(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MedicalRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMedicalRecords(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using patientId you get the list of medical records
         * @summary Provides the medical records for a patient
         * @param {string} patientId pass the id of the particular patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMedicalRecords(patientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MedicalRecordDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMedicalRecords(patientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MedicalRecordsApi - factory interface
 * @export
 */
export const MedicalRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MedicalRecordsApiFp(configuration)
    return {
        /**
         * Get the list of all medical records
         * @summary Provides all medical records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMedicalRecords(options?: any): AxiosPromise<Array<MedicalRecord>> {
            return localVarFp.getAllMedicalRecords(options).then((request) => request(axios, basePath));
        },
        /**
         * By using patientId you get the list of medical records
         * @summary Provides the medical records for a patient
         * @param {string} patientId pass the id of the particular patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedicalRecords(patientId: string, options?: any): AxiosPromise<Array<MedicalRecordDetail>> {
            return localVarFp.getMedicalRecords(patientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MedicalRecordsApi - interface
 * @export
 * @interface MedicalRecordsApi
 */
export interface MedicalRecordsApiInterface {
    /**
     * Get the list of all medical records
     * @summary Provides all medical records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalRecordsApiInterface
     */
    getAllMedicalRecords(options?: AxiosRequestConfig): AxiosPromise<Array<MedicalRecord>>;

    /**
     * By using patientId you get the list of medical records
     * @summary Provides the medical records for a patient
     * @param {string} patientId pass the id of the particular patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalRecordsApiInterface
     */
    getMedicalRecords(patientId: string, options?: AxiosRequestConfig): AxiosPromise<Array<MedicalRecordDetail>>;

}

/**
 * MedicalRecordsApi - object-oriented interface
 * @export
 * @class MedicalRecordsApi
 * @extends {BaseAPI}
 */
export class MedicalRecordsApi extends BaseAPI implements MedicalRecordsApiInterface {
    /**
     * Get the list of all medical records
     * @summary Provides all medical records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalRecordsApi
     */
    public getAllMedicalRecords(options?: AxiosRequestConfig) {
        return MedicalRecordsApiFp(this.configuration).getAllMedicalRecords(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using patientId you get the list of medical records
     * @summary Provides the medical records for a patient
     * @param {string} patientId pass the id of the particular patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalRecordsApi
     */
    public getMedicalRecords(patientId: string, options?: AxiosRequestConfig) {
        return MedicalRecordsApiFp(this.configuration).getMedicalRecords(patientId, options).then((request) => request(this.axios, this.basePath));
    }
}


