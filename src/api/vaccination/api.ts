/* tslint:disable */
/* eslint-disable */
/**
 * Vaccination Records API
 * Vaccination Records API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface VaccinationRecord
 */
export interface VaccinationRecord {
    /**
     * 
     * @type {string}
     * @memberof VaccinationRecord
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof VaccinationRecord
     */
    'vaccineType'?: string;
    /**
     * 
     * @type {string}
     * @memberof VaccinationRecord
     */
    'dose'?: string;
    /**
     * 
     * @type {string}
     * @memberof VaccinationRecord
     */
    'manufacturer'?: string;
    /**
     * 
     * @type {string}
     * @memberof VaccinationRecord
     */
    'batchNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof VaccinationRecord
     */
    'sideEffects'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new vaccination record
         * @param {VaccinationRecord} vaccinationRecord Vaccination record to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVaccinationRecord: async (vaccinationRecord: VaccinationRecord, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaccinationRecord' is not null or undefined
            assertParamExists('createVaccinationRecord', 'vaccinationRecord', vaccinationRecord)
            const localVarPath = `/vaccination-records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vaccinationRecord, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all vaccination records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaccinationRecords: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vaccination-records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new vaccination record
         * @param {VaccinationRecord} vaccinationRecord Vaccination record to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVaccinationRecord(vaccinationRecord: VaccinationRecord, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVaccinationRecord(vaccinationRecord, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all vaccination records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaccinationRecords(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VaccinationRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaccinationRecords(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new vaccination record
         * @param {VaccinationRecord} vaccinationRecord Vaccination record to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVaccinationRecord(vaccinationRecord: VaccinationRecord, options?: any): AxiosPromise<void> {
            return localVarFp.createVaccinationRecord(vaccinationRecord, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all vaccination records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaccinationRecords(options?: any): AxiosPromise<Array<VaccinationRecord>> {
            return localVarFp.getVaccinationRecords(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Create a new vaccination record
     * @param {VaccinationRecord} vaccinationRecord Vaccination record to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createVaccinationRecord(vaccinationRecord: VaccinationRecord, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get all vaccination records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getVaccinationRecords(options?: AxiosRequestConfig): AxiosPromise<Array<VaccinationRecord>>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Create a new vaccination record
     * @param {VaccinationRecord} vaccinationRecord Vaccination record to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createVaccinationRecord(vaccinationRecord: VaccinationRecord, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createVaccinationRecord(vaccinationRecord, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all vaccination records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVaccinationRecords(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVaccinationRecords(options).then((request) => request(this.axios, this.basePath));
    }
}


